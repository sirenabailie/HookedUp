// <auto-generated />
using System;
using System.Collections.Generic;
using HookedUp;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HookedUp.Migrations
{
    [DbContext(typeof(HookedUpDbContext))]
    [Migration("20250610234827_SeedAllProjectRequests")]
    partial class SeedAllProjectRequests
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HookedUp.Models.ArtistProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("ExpertiseLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.Property<string>("WorkDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("WorkImages")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ArtistProfiles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 856, DateTimeKind.Local).AddTicks(5581),
                            ExpertiseLevel = "Advanced",
                            ProfilePicture = "https://example.com/artist1.jpg",
                            Specialization = "Crochet",
                            UpdatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 856, DateTimeKind.Local).AddTicks(5692),
                            UserId = 2,
                            WorkDescription = "Experienced in creating custom crochet items.",
                            WorkImages = new List<string> { "https://example.com/work1.jpg", "https://example.com/work2.jpg" }
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 856, DateTimeKind.Local).AddTicks(5792),
                            ExpertiseLevel = "Intermediate",
                            ProfilePicture = "https://example.com/sophiagarcia_art.jpg",
                            Specialization = "Knit",
                            UpdatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 856, DateTimeKind.Local).AddTicks(5793),
                            UserId = 4,
                            WorkDescription = "Experienced in creating custom knit items.",
                            WorkImages = new List<string> { "https://example.com/sophia_work1.jpg", "https://example.com/sophia_work2.jpg" }
                        });
                });

            modelBuilder.Entity("HookedUp.Models.DirectMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("MessageText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProjectRequestId")
                        .HasColumnType("integer");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ProjectRequestId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("DirectMessages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MessageText = "Hi, I'd love to help with your baby blanket project!",
                            ProjectRequestId = 1,
                            ReceiverId = 2,
                            SenderId = 1,
                            Timestamp = new DateTime(2025, 6, 10, 18, 48, 26, 857, DateTimeKind.Local).AddTicks(2104)
                        },
                        new
                        {
                            Id = 2,
                            MessageText = "Hello Sienna, I’d be happy to finish your knit scarf project!",
                            ProjectRequestId = 2,
                            ReceiverId = 3,
                            SenderId = 4,
                            Timestamp = new DateTime(2025, 6, 10, 18, 48, 26, 857, DateTimeKind.Local).AddTicks(2199)
                        });
                });

            modelBuilder.Entity("HookedUp.Models.ProjectRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Claimed")
                        .HasColumnType("boolean");

                    b.Property<int?>("ClaimedByUserId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProjectType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ProjectRequests");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Claimed = false,
                            CreatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 856, DateTimeKind.Local).AddTicks(8470),
                            Description = "Need a crocheted baby blanket.",
                            DueDate = new DateTime(2025, 6, 15, 18, 48, 26, 856, DateTimeKind.Local).AddTicks(8119),
                            Location = "New York",
                            ProjectType = "Crochet",
                            Status = "Open",
                            Title = "Create a Baby Blanket",
                            UpdatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 856, DateTimeKind.Local).AddTicks(8546),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            Claimed = false,
                            CreatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 856, DateTimeKind.Local).AddTicks(8629),
                            Description = "Looking for someone to finish my grandmother's knit scarf project.",
                            DueDate = new DateTime(2025, 6, 17, 18, 48, 26, 856, DateTimeKind.Local).AddTicks(8628),
                            Location = "Chicago",
                            ProjectType = "Knit",
                            Status = "Open",
                            Title = "Finish a Knit Scarf",
                            UpdatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 856, DateTimeKind.Local).AddTicks(8630),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("HookedUp.Models.ReviewRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("ProjectRequestId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string[]>("ReviewImage")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("ReviewText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("ReviewRatings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtistId = 2,
                            CreatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 857, DateTimeKind.Local).AddTicks(505),
                            ProjectRequestId = 1,
                            Rating = 5,
                            ReviewImage = new[] { "https://example.com/reviewimage1.jpg" },
                            ReviewText = "Amazing crochet work! Very satisfied.",
                            UpdatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 857, DateTimeKind.Local).AddTicks(598),
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            ArtistId = 4,
                            CreatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 857, DateTimeKind.Local).AddTicks(679),
                            ProjectRequestId = 2,
                            Rating = 4,
                            ReviewImage = new[] { "https://example.com/reviewimage2.jpg" },
                            ReviewText = "Sophia did a great job finishing my scarf—very happy with the result!",
                            UpdatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 857, DateTimeKind.Local).AddTicks(680),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("HookedUp.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 854, DateTimeKind.Local).AddTicks(8658),
                            Email = "sirenafoster@example.com",
                            Name = "Sirena Foster",
                            Password = "password123",
                            ProfilePicture = "https://example.com/sirenafoster.jpg",
                            Role = "user",
                            UpdatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 856, DateTimeKind.Local).AddTicks(641)
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 856, DateTimeKind.Local).AddTicks(799),
                            Email = "jane.smith@example.com",
                            Name = "Jane Smith",
                            Password = "password456",
                            ProfilePicture = "https://example.com/janesmith.jpg",
                            Role = "artist",
                            UpdatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 856, DateTimeKind.Local).AddTicks(802)
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 856, DateTimeKind.Local).AddTicks(805),
                            Email = "sienna.delmar@example.com",
                            Name = "Sienna Delmar",
                            Password = "password789",
                            ProfilePicture = "https://example.com/siennadelmar.jpg",
                            Role = "user",
                            UpdatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 856, DateTimeKind.Local).AddTicks(806)
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 856, DateTimeKind.Local).AddTicks(808),
                            Email = "sophia.garcia@example.com",
                            Name = "Sophia Garcia",
                            Password = "password000",
                            ProfilePicture = "https://example.com/sophiagarcia.jpg",
                            Role = "artist",
                            UpdatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 856, DateTimeKind.Local).AddTicks(809)
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 856, DateTimeKind.Local).AddTicks(811),
                            Email = "iris.huxley@example.com",
                            Name = "Iris Huxley",
                            Password = "password321",
                            ProfilePicture = "https://example.com/irishuxley.jpg",
                            Role = "artist",
                            UpdatedAt = new DateTime(2025, 6, 10, 18, 48, 26, 856, DateTimeKind.Local).AddTicks(812)
                        });
                });

            modelBuilder.Entity("HookedUp.Models.ArtistProfile", b =>
                {
                    b.HasOne("HookedUp.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("HookedUp.Models.DirectMessage", b =>
                {
                    b.HasOne("HookedUp.Models.ProjectRequest", "ProjectRequest")
                        .WithMany()
                        .HasForeignKey("ProjectRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HookedUp.Models.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HookedUp.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectRequest");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });
#pragma warning restore 612, 618
        }
    }
}
